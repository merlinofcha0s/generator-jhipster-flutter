<%_
const variables = {};
const dartFields = {};
const index = {};
const defaultVariablesValues = {};
const pkType = context.pkType;
const fields = context.fields;
const relationships = context.relationships;
const entityClass = context.entityClass;
const entityInstance = context.entityInstance;
let hasUserRelationship = false;
let dartKeyType;
if (pkType === 'String') {
    dartKeyType = 'string';
} else {
    dartKeyType = 'number';
}
variables['id'] = 'id';
const id = {};
var i = 0;
id['type'] = 'int';
id['name'] = 'id';
id['i']=i;
dartFields['id'] = id;
function capitalize(text) {
    return text.substr( 0, 1 ).toUpperCase() + text.substr( 1 );
}
fields.forEach(field => {
    i++;
    const varValue = {};
    const fieldType = field.fieldType;
    const fieldName = field.fieldName;
    let dartType;
    let desc;
    if (field.fieldIsEnum) {
        dartType = field.fieldType;
    } else if (fieldType === 'UUID') {
        dartType = 'String';
    } else if (fieldType === 'Integer' || fieldType === 'Long') {
        dartType = 'int';
    } else if (fieldType === 'Instant') {
        dartType = 'DateTime';
        desc = '.toIso8601String()' + 'Z';
    } else {
        dartType = fieldType ;
    } 
    varValue['type'] = dartType;
    varValue['name'] = fieldName;
    varValue['desc'] = desc;
    varValue['i']=i;
    
    dartFields[fieldName] = varValue;
    
});
relationships.forEach(rela => { 
    if(rela.relationshipType == 'many-to-one' || rela.relationshipType == 'one-to-one' && rela.ownerSide == true
    || rela.relationshipType == 'many-to-many'  && rela.ownerSide == true ){
        i++;
        const varValue = {};
        varValue['type'] = capitalize(rela.otherEntityName);
        varValue['name'] = rela.relationshipName;
        varValue['desc'] = 'relationship';
        varValue['isList'] = (rela.relationshipType=='many-to-many')?true:false;
        
        dartFields[rela.otherEntityName] = varValue;
    }
});
_%>
import 'package:dart_json_mapper/dart_json_mapper.dart';

<% for (idx in dartFields) { if (dartFields[idx]['desc'] == 'relationship') {%>
import '../<%- idx %>/<%- idx %>_model.dart';<%}} %>

@jsonSerializable
class <%= entityClass %> {
<%_ for (idx in dartFields) { %>
  @JsonProperty(name: '<%- dartFields[idx]['name'] _%>' <%_ if(dartFields[idx]['type'] === 'DateTime') { _%>, converterParams: {'format': 'yyyy-MM-dd\'T\'HH:mm:ss\'Z\''}<%_ }  _%>)
    <%_ if(dartFields[idx]['isList']) { _%>
  final List<<%- dartFields[idx]['type'] %>> <%- dartFields[idx]['name'] _%>;
    <%_ } else { _%>
  final <%= dartFields[idx]['type'] %> <%= dartFields[idx]['name'] %>;
    <%_ } _%>
<%_ } _%>
        
 const <%= entityClass %> (
     <%_ for (idx in dartFields) { _%>
        this.<%- dartFields[idx]['name'] -%>,
        <%_ } _%> 
    );

@override
String toString() {
    return '<%= entityClass %>{'+
    <% for (idx in dartFields) { _%>
        '<%= dartFields[idx]['name'] _%>: $<%= dartFields[idx]['name'] _%>,' +
    <% } _%> 
    '}';
   }

@override
bool operator == (Object other) => 
    identical(this, other) ||
    other is <%= entityClass %> &&
    <% var iEqual = 0; for (idx in dartFields) { _%>
    <% if(iEqual != i) {_%>
    <%- dartFields[idx]['name'] + ' == other.' + dartFields[idx]['name'] + ' '-%> &&
    <% } else {_%>
    <%- dartFields[idx]['name'] _%> == other.<%- dartFields[idx]['name'] %>;
    <% } _%> 
    <%  iEqual++; } _%>


@override
int get hashCode => 
    <% var iEqual = 0; for (idx in dartFields) { _%>
    <% if(iEqual != i) {_%>
    <%- dartFields[idx]['name'] + '.hashCode ' -%> ^
    <% } else {_%>
    <%- dartFields[idx]['name'] + '.hashCode' _%>;
    <% } _%> 
    <%  iEqual++; } _%>
}


<%_ const enumsAlreadyDeclared = [];
fields.forEach(field => {
    if (field.fieldIsEnum && enumsAlreadyDeclared.indexOf(field.fieldType) === -1) {
        enumsAlreadyDeclared.push(field.fieldType); _%>
@jsonSerializable
@Json(enumValues: <%= field.fieldType %>.values)
enum <%= field.fieldType %> {<%
        const enums = field.fieldValues.split(',');
        for (let i = 0; i < enums.length; i++) { %>
    <%= enums[i] %> <%if (i < enums.length - 1) { %>,<% }
        } %>
} <%_ }}); _%>
