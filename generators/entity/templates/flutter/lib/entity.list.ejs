<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const camelizedUpperFirstBaseName = context.camelizedUpperFirstBaseName;
const entityClassCamelCase = context.entityClassCamelCase;
const enableTranslation = context.enableTranslation;
const fields = context.fields;
_%>
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:<%= baseName %>/account/login/login_repository.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/bloc/<%= entityFileName %>_bloc.dart';
import 'package:<%= baseName %>/entities/<%= entityFileName %>/<%= entityFileName %>_model.dart';
<%_ if(enableTranslation) { _%>
import 'package:<%= baseName %>/generated/l10n.dart';
<%_ } _%>
import 'package:<%= baseName %>/keys.dart';
import 'package:flutter/material.dart';
import 'package:<%= baseName %>/shared/widgets/drawer/bloc/drawer_bloc.dart';
import 'package:<%= baseName %>/shared/widgets/drawer/drawer_widget.dart';
import 'package:<%= baseName %>/shared/widgets/loading_indicator_widget.dart';

class <%= entityClass %>ListScreen extends StatelessWidget {
    <%= entityClass %>ListScreen({Key key}) : super(key: <%= camelizedUpperFirstBaseName %>Keys.<%= entityClassCamelCase %>ListScreen);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          centerTitle: true,
  title:Text(<%_ if(enableTranslation) { _%>S.of(context).pageEntities<%= entityClass %>ListTitle<%_ } else { _%> '<%= entityClassPlural %> List'  <%_ } _%>),
        ),
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(15.0),
          child: BlocBuilder<<%= entityClass %>Bloc, <%= entityClass %>State>(
            buildWhen: (previous, current) => previous.<%= entityClassPluralLowered %> != current.<%= entityClassPluralLowered %>,
            builder: (context, state) {
              return Visibility(
                visible: state.<%= entityClassCamelCase %>StatusUI == <%= entityClass %>StatusUI.done,
                replacement: LoadingIndicator(),
                child: Column(children: <Widget>[
                  for (<%= entityClass %> <%= entityClassCamelCase %> in state.<%= entityClassPluralLowered %>) <%= entityClassCamelCase %>Card(<%= entityClassCamelCase %>, context)
                ]),
              );
            }
          ),
        ),
      drawer: BlocProvider<DrawerBloc>(
          create: (context) => DrawerBloc(loginRepository: LoginRepository()),
          child: <%= camelizedUpperFirstBaseName %>Drawer()),
      floatingActionButton: FloatingActionButton(
        onPressed: () => null,
        child: Icon(Icons.add, color: Theme.of(context).iconTheme.color,),
        backgroundColor: Theme.of(context).primaryColor,
      )
    );
  }

  Widget <%= entityClassCamelCase %>Card(<%= entityClass %> <%= entityClassCamelCase %>, BuildContext context) {
    return Card(
      child: Container(
        width: MediaQuery.of(context).size.width * 0.90,
        child: Column(
          children: <Widget>[
            ListTile(
              leading: Icon(Icons.turned_in),
              <%_ for (let i = 0; i < 2 && i < fields.length ; i++) { _%>
                <%_ if(i == 0) { _%>
                  title: Text('<%= fields[i].fieldNameHumanized %> : ${<%= entityClassCamelCase %>.<%= fields[i].fieldName %>.toString()}'),
              <%_ } else { _%>
                  subtitle: Text('<%= fields[i].fieldNameHumanized %> : ${<%= entityClassCamelCase %>.<%= fields[i].fieldName %>.toString()}'),
              <%_ } _%>
            <%_ } _%>
            ),
            ButtonBar(
              children: <Widget>[
                FlatButton(
              child: Text(<%_ if(enableTranslation) { _%>S.of(context).entityActionView<%_ } else { _%>'View'<%_ } _%>%>),
                  onPressed: () {/* ... */},
                ),
                FlatButton(
                  child: Text(<%_ if(enableTranslation) { _%>S.of(context).entityActionEdit<%_ } else { _%>'Edit'<%_ } _%>),
                  onPressed: () {/* ... */},
                ),
                FlatButton(
                  child: Text(<%_ if(enableTranslation) { _%>S.of(context).entityActionDelete<%_ } else { _%>'Delete'<%_ } _%>),
                  onPressed: () {/* ... */},
                ),
              ],
            )
          ],
        ),
      ),
    );
  }
}
