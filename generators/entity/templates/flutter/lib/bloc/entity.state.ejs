<%_
const baseName = context.baseName;
const entityInstance = context.entityInstance;
const entityFileName = context.entityFileName;
const entityClassPlural = context.entityClassPlural;
const entityClassPluralLowered = context.entityClassPluralLowered;
const entityClass = context.entityClass;
const entityClassCamelCase = context.entityClassCamelCase;
_%>
part of '<%= entityFileName %>_bloc.dart';

enum <%= entityClass %>StatusUI {init, loading, done}

class <%= entityClass %>State extends Equatable {
  final List<<%= entityClass %>> <%= entityClassPluralLowered %>;
  final <%= entityClass %>StatusUI <%= entityClassCamelCase %>StatusUI;
  
  const <%= entityClass %>State({
    this.<%= entityClassPluralLowered %> = const [],
    this.<%= entityClassCamelCase %>StatusUI = <%= entityClass %>StatusUI.init
  });

  <%= entityClass %>State copyWith({
    List<<%= entityClass %>> <%= entityClassPluralLowered %>,
    <%= entityClass %>StatusUI <%= entityClassCamelCase %>StatusUI
  }) {
    return <%= entityClass %>State(
        <%= entityClassPluralLowered %>: <%= entityClassPluralLowered %> ?? this.<%= entityClassPluralLowered %>,
      <%= entityClassCamelCase %>StatusUI: <%= entityClassCamelCase %>StatusUI ?? this.<%= entityClassCamelCase %>StatusUI
    );
  }

  @override
  List<Object> get props => [<%= entityClassPluralLowered %>, <%= entityClassCamelCase %>StatusUI];

  @override
  bool get stringify => true;
}
